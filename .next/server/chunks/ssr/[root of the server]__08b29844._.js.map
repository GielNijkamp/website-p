{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 38, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/styles/Header.module.css [app-ssr] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"active\": \"Header-module__KppamW__active\",\n  \"header\": \"Header-module__KppamW__header\",\n  \"header-container\": \"Header-module__KppamW__header-container\",\n  \"nav-menu\": \"Header-module__KppamW__nav-menu\",\n  \"scrolled\": \"Header-module__KppamW__scrolled\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA"}},
    {"offset": {"line": 51, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/gieln/code/projects/website/gnijkamp/src/components/Header.tsx"],"sourcesContent":["// src/components/Header.tsx\r\n'use client'\r\n\r\nimport Link from 'next/link'\r\nimport { usePathname } from 'next/navigation'\r\nimport { useEffect, useState } from 'react'\r\nimport styles from '../styles/Header.module.css'\r\n\r\ninterface NavLink {\r\n  name: string\r\n  path: string\r\n}\r\n\r\nexport default function Header() {\r\n  const pathname = usePathname()\r\n  const [isScrolled, setIsScrolled] = useState(false)\r\n\r\n  const links: NavLink[] = [\r\n    { name: 'Home', path: '/' },\r\n    { name: 'About', path: '/about' },\r\n    { name: 'Blog', path: '/blog' },\r\n    { name: 'Projects', path: '/projects' },\r\n    { name: 'Newsletter', path: '/newsletter' },\r\n    { name: 'Contact', path: '/contact' }\r\n  ]\r\n\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      setIsScrolled(window.scrollY > 10)\r\n      document.documentElement.style.setProperty(\r\n        '--header-current-height', \r\n        window.scrollY > 10 ? 'var(--header-height-scrolled)' : 'var(--header-height)'\r\n      )\r\n    }\r\n    \r\n    // Initialize on mount\r\n    handleScroll()\r\n    \r\n    window.addEventListener('scroll', handleScroll, { passive: true })\r\n    return () => window.removeEventListener('scroll', handleScroll)\r\n  }, [])\r\n\r\n  return (\r\n    <header className={`\r\n      fixed top-0 w-full \r\n      h-[var(--header-current-height,var(--header-height))] \r\n      bg-primary/95 backdrop-blur-md \r\n      transition-all duration-300 \r\n      ${isScrolled ? 'shadow-md h-header-scrolled' : 'h-header'}\r\n    `}>\r\n      <div className={styles['header-container']}>\r\n        <nav className={styles['nav-menu']} aria-label=\"Main navigation\">\r\n          <ul role=\"list\">\r\n            {links.map((link) => (\r\n              <li key={link.path}>\r\n                <Link\r\n                  href={link.path}\r\n                  className={`${styles['nav-link']} ${\r\n                    pathname === link.path ? styles.active : ''\r\n                  }`}\r\n                  aria-current={pathname === link.path ? 'page' : undefined}\r\n                >\r\n                  {link.name}\r\n                </Link>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n    </header>\r\n  )\r\n}"],"names":[],"mappings":"AAAA,4BAA4B;;;;;AAG5B;AACA;AACA;AACA;AALA;;;;;;AAYe,SAAS;IACtB,MAAM,WAAW,CAAA,GAAA,kIAAA,CAAA,cAAW,AAAD;IAC3B,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE7C,MAAM,QAAmB;QACvB;YAAE,MAAM;YAAQ,MAAM;QAAI;QAC1B;YAAE,MAAM;YAAS,MAAM;QAAS;QAChC;YAAE,MAAM;YAAQ,MAAM;QAAQ;QAC9B;YAAE,MAAM;YAAY,MAAM;QAAY;QACtC;YAAE,MAAM;YAAc,MAAM;QAAc;QAC1C;YAAE,MAAM;YAAW,MAAM;QAAW;KACrC;IAED,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,eAAe;YACnB,cAAc,OAAO,OAAO,GAAG;YAC/B,SAAS,eAAe,CAAC,KAAK,CAAC,WAAW,CACxC,2BACA,OAAO,OAAO,GAAG,KAAK,kCAAkC;QAE5D;QAEA,sBAAsB;QACtB;QAEA,OAAO,gBAAgB,CAAC,UAAU,cAAc;YAAE,SAAS;QAAK;QAChE,OAAO,IAAM,OAAO,mBAAmB,CAAC,UAAU;IACpD,GAAG,EAAE;IAEL,qBACE,8OAAC;QAAO,WAAW,CAAC;;;;;MAKlB,EAAE,aAAa,gCAAgC,WAAW;IAC5D,CAAC;kBACC,cAAA,8OAAC;YAAI,WAAW,mIAAA,CAAA,UAAM,CAAC,mBAAmB;sBACxC,cAAA,8OAAC;gBAAI,WAAW,mIAAA,CAAA,UAAM,CAAC,WAAW;gBAAE,cAAW;0BAC7C,cAAA,8OAAC;oBAAG,MAAK;8BACN,MAAM,GAAG,CAAC,CAAC,qBACV,8OAAC;sCACC,cAAA,8OAAC,4JAAA,CAAA,UAAI;gCACH,MAAM,KAAK,IAAI;gCACf,WAAW,GAAG,mIAAA,CAAA,UAAM,CAAC,WAAW,CAAC,CAAC,EAChC,aAAa,KAAK,IAAI,GAAG,mIAAA,CAAA,UAAM,CAAC,MAAM,GAAG,IACzC;gCACF,gBAAc,aAAa,KAAK,IAAI,GAAG,SAAS;0CAE/C,KAAK,IAAI;;;;;;2BARL,KAAK,IAAI;;;;;;;;;;;;;;;;;;;;;;;;;AAiBhC","debugId":null}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/gieln/code/projects/website/gnijkamp/src/app/three/NeuralCore.tsx"],"sourcesContent":["// app/three/NeuralCore.tsx\r\n'use client'\r\nimport { Canvas, useFrame, extend } from '@react-three/fiber'\r\nimport { useRef, useMemo, useLayoutEffect, useEffect } from 'react'\r\nimport * as THREE from 'three'\r\nimport { Line, LineSegments } from 'three'\r\n\r\nextend({ Line, LineSegments })\r\n\r\ntype Signal = {\r\n  path: THREE.Vector3[]\r\n  currentSegment: number\r\n  progress: number\r\n  speed: number\r\n  life: number\r\n  scale: number\r\n}\r\n\r\ntype Beam = {\r\n  start: THREE.Vector3\r\n  end: THREE.Vector3\r\n  alpha: number\r\n}\r\n\r\nconst MAX_BEAMS = 100\r\n\r\nfunction NeuralCore() {\r\n  const groupRef = useRef<THREE.Group>(null!)\r\n  const icosahedron = useMemo(() => new THREE.IcosahedronGeometry(80, 2), [])\r\n  const vertices = icosahedron.attributes.position.array as Float32Array\r\n  const particleCount = icosahedron.attributes.position.count\r\n\r\n  // Main particles\r\n  const particlesRef = useRef<THREE.InstancedMesh>(null!)\r\n  const dummy = useMemo(() => new THREE.Object3D(), [])\r\n  const basePositions = useMemo(() => {\r\n    const positions: THREE.Vector3[] = []\r\n    for (let i = 0; i < particleCount; i++) {\r\n      positions.push(new THREE.Vector3(\r\n        vertices[i * 3],\r\n        vertices[i * 3 + 1],\r\n        vertices[i * 3 + 2]\r\n      ))\r\n    }\r\n    return positions\r\n  }, [vertices, particleCount])\r\n\r\n  // Signal particles\r\n  const signalMaterial = useMemo(() => new THREE.ShaderMaterial({\r\n    uniforms: {\r\n      time: { value: 0 },\r\n      intensity: { value: 1.0 }\r\n    },\r\n    vertexShader: `\r\n      varying float vLife;\r\n      varying vec3 vPosition;\r\n      void main() {\r\n        vLife = instanceMatrix[3][3];\r\n        vPosition = position;\r\n        gl_Position = projectionMatrix * modelViewMatrix * instanceMatrix * vec4(position, 1.0);\r\n      }\r\n    `,\r\n    fragmentShader: `\r\n      uniform float time;\r\n      uniform float intensity;\r\n      varying float vLife;\r\n      void main() {\r\n        float pulse = sin(vLife * 20.0 + time * 5.0) * 0.5 + 0.5;\r\n        vec3 color = vec3(1.0, 0.2, 0.2) * intensity * (1.0 + pulse * 0.5);\r\n        float alpha = smoothstep(0.0, 0.2, vLife) * smoothstep(1.0, 0.8, vLife);\r\n        gl_FragColor = vec4(color, alpha * 1.2);\r\n      }\r\n    `,\r\n    transparent: true,\r\n    blending: THREE.AdditiveBlending\r\n  }), [])\r\n  const signalParticlesRef = useRef<THREE.InstancedMesh>(null!)\r\n  const signalQueue = useRef<Signal[]>([])\r\n\r\n  // Beams\r\n  const beamGeometry = useMemo(() => {\r\n    const geometry = new THREE.BufferGeometry()\r\n    const positions = new Float32Array(MAX_BEAMS * 3 * 2)\r\n    const alphas = new Float32Array(MAX_BEAMS * 2)\r\n    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3))\r\n    geometry.setAttribute('alpha', new THREE.BufferAttribute(alphas, 1))\r\n    return geometry\r\n  }, [])\r\n  const beamMaterial = useMemo(() => new THREE.ShaderMaterial({\r\n    uniforms: {\r\n      time: { value: 0 },\r\n      color: { value: new THREE.Color(0xffff00) }\r\n    },\r\n    vertexShader: `\r\n      attribute float alpha;\r\n      varying float vAlpha;\r\n      void main() {\r\n        vAlpha = alpha;\r\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n      }\r\n    `,\r\n    fragmentShader: `\r\n      uniform vec3 color;\r\n      varying float vAlpha;\r\n      void main() {\r\n        float glow = smoothstep(0.3, 1.0, 1.0 - length(gl_PointCoord.xy - vec2(0.5)) * 1.0);\r\n        gl_FragColor = vec4(color, vAlpha * glow * 0.9);\r\n      }\r\n    `,\r\n    transparent: true,\r\n    blending: THREE.AdditiveBlending,\r\n    depthWrite: false\r\n  }), [])\r\n  const beamsRef = useRef<THREE.LineSegments>(null)\r\n  const activeBeams = useRef<Beam[]>([])\r\n\r\n  // Connections\r\n  const connectionMaterial = useMemo(() => new THREE.ShaderMaterial({\r\n    uniforms: {\r\n      time: { value: 0 },\r\n      pulseSpeed: { value: 2.0 },\r\n      glowIntensity: { value: 2.0 }\r\n    },\r\n    vertexShader: `\r\n      varying vec2 vUv;\r\n      varying vec3 vPosition;\r\n      void main() {\r\n        vUv = uv;\r\n        vPosition = position;\r\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n      }\r\n    `,\r\n    fragmentShader: `\r\n      uniform float time;\r\n      uniform float pulseSpeed;\r\n      uniform float glowIntensity;\r\n      varying vec2 vUv;\r\n      varying vec3 vPosition;\r\n      \r\n      void main() {\r\n        float pulse = sin(time * pulseSpeed + length(vPosition) * 2.0) * 0.5 + 0.5;\r\n        vec3 color = vec3(1.0, 0.9, 0.3) * glowIntensity * pulse;\r\n        float alpha = (sin((vUv.x * 20.0 - time * 3.0)) + 1.0) * 0.3 * (1.0 - vUv.x);\r\n        gl_FragColor = vec4(color, alpha * 0.9);\r\n      }\r\n    `,\r\n    transparent: true,\r\n    blending: THREE.AdditiveBlending,\r\n    depthWrite: false\r\n  }), [])\r\n  const connections = useMemo(() => {\r\n    const maxConnections = Math.floor(particleCount * 0.85)\r\n    return Array.from({ length: maxConnections }).map((_, i) => {\r\n      const start = basePositions[i % particleCount]\r\n      const end = basePositions[(i + Math.floor(Math.random() * 5) + 1) % particleCount]\r\n      return { start, end }\r\n    })\r\n  }, [basePositions, particleCount])\r\n  const connectionRefs = useRef<(THREE.Line | null)[]>([])\r\n\r\n  useLayoutEffect(() => {\r\n    // Initialize main particles\r\n    for (let i = 0; i < particleCount; i++) {\r\n      dummy.position.copy(basePositions[i])\r\n      dummy.updateMatrix()\r\n      particlesRef.current.setMatrixAt(i, dummy.matrix)\r\n    }\r\n    particlesRef.current.instanceMatrix.needsUpdate = true\r\n  }, [basePositions, dummy, particleCount])\r\n\r\n  useFrame((state) => {\r\n    const time = state.clock.getElapsedTime()\r\n    \r\n    // Update materials\r\n    signalMaterial.uniforms.time.value = time\r\n    signalMaterial.uniforms.intensity.value = 1.0 + Math.sin(time * 10) * 0.5\r\n    beamMaterial.uniforms.time.value = time\r\n    connectionMaterial.uniforms.time.value = time\r\n    connectionMaterial.uniforms.glowIntensity.value = 2.0 + Math.sin(time * 2) * 0.5\r\n\r\n    // Generate new signals\r\n    if (time - (signalQueue.current[0]?.life ?? 0) > 0.1) {\r\n      const newSignal = createSignal(basePositions, particleCount)\r\n      signalQueue.current.push(newSignal)\r\n    }\r\n\r\n    // Update signals\r\n    activeBeams.current = []\r\n    signalQueue.current.forEach((signal, idx) => {\r\n      signal.progress += signal.speed\r\n      const startPos = signal.path[signal.currentSegment]\r\n      const endPos = signal.path[signal.currentSegment + 1]\r\n      const currentPos = startPos.clone().lerp(endPos, signal.progress)\r\n\r\n      // Add beams\r\n      for (let i = 0; i <= signal.currentSegment; i++) {\r\n        activeBeams.current.push({\r\n          start: signal.path[i],\r\n          end: i === signal.currentSegment ? currentPos : signal.path[i + 1],\r\n          alpha: signal.life * (1 - i / signal.path.length)\r\n        })\r\n      }\r\n\r\n      // Update signal particle\r\n      dummy.position.copy(currentPos)\r\n      dummy.scale.setScalar(signal.scale)\r\n      dummy.updateMatrix()\r\n      signalParticlesRef.current.setMatrixAt(idx, dummy.matrix)\r\n\r\n      // Check path progress\r\n      if (signal.progress >= 1.0) {\r\n        signal.currentSegment++\r\n        signal.progress = 0\r\n        if (signal.currentSegment >= signal.path.length - 1) {\r\n          signalQueue.current.splice(idx, 1)\r\n        }\r\n      }\r\n      signal.life -= 0.005\r\n    })\r\n    signalParticlesRef.current.instanceMatrix.needsUpdate = true\r\n\r\n    // Update beams\r\n    const positionAttr = beamGeometry.attributes.position as THREE.BufferAttribute\r\n    const alphaAttr = beamGeometry.attributes.alpha as THREE.BufferAttribute\r\n    activeBeams.current.forEach((beam, i) => {\r\n      const offset = i * 6\r\n      positionAttr.array[offset] = beam.start.x\r\n      positionAttr.array[offset + 1] = beam.start.y\r\n      positionAttr.array[offset + 2] = beam.start.z\r\n      positionAttr.array[offset + 3] = beam.end.x\r\n      positionAttr.array[offset + 4] = beam.end.y\r\n      positionAttr.array[offset + 5] = beam.end.z\r\n      alphaAttr.array[i * 2] = beam.alpha\r\n      alphaAttr.array[i * 2 + 1] = beam.alpha\r\n    })\r\n    positionAttr.needsUpdate = true\r\n    alphaAttr.needsUpdate = true\r\n    if (beamsRef.current) {\r\n      beamsRef.current.geometry.setDrawRange(0, activeBeams.current.length * 2)\r\n    }\r\n\r\n    // Update connections visibility\r\n    const visibleCount = Math.floor(connections.length * (0.5 + Math.sin(time * 1.2) * 0.5))\r\n    connectionRefs.current.forEach((conn, idx) => {\r\n      if (conn) conn.visible = idx < visibleCount\r\n    })\r\n\r\n    // Rotation\r\n    groupRef.current.rotation.x += 0.0005 * Math.sin(time * 0.1)\r\n    groupRef.current.rotation.y += 0.0005 * Math.cos(time * 0.1)\r\n    groupRef.current.rotation.z += 0.0003 * Math.sin(time * 0.1)\r\n  })\r\n\r\n  return (\r\n    <group ref={groupRef}>\r\n      <instancedMesh\r\n        ref={particlesRef}\r\n        args={[new THREE.SphereGeometry(0.6, 8, 8), new THREE.MeshBasicMaterial({\r\n          color: 0xffff00,\r\n          transparent: true,\r\n          opacity: 0.9,\r\n          blending: THREE.AdditiveBlending\r\n        }), particleCount]}\r\n      />\r\n      <instancedMesh\r\n        ref={signalParticlesRef}\r\n        args={[new THREE.SphereGeometry(1.2, 32, 32), signalMaterial, 150]}\r\n      />\r\n      <lineSegments ref={beamsRef} geometry={beamGeometry} material={beamMaterial} />\r\n      <group>\r\n        {connections.map(({ start, end }, idx) => (\r\n            <line\r\n              key={idx}\r\n              ref={el => (connectionRefs.current[idx] = el)}\r\n              geometry={new THREE.BufferGeometry().setFromPoints([start, end])}\r\n              material={connectionMaterial}\r\n            />\r\n        ))}\r\n      </group>\r\n    </group>\r\n  )\r\n}\r\n\r\nfunction createSignal(basePositions: THREE.Vector3[], particleCount: number): Signal {\r\n  const startIdx = Math.floor(Math.random() * particleCount)\r\n  const pathLength = Math.floor(Math.random() * 5) + 3\r\n  const path = [basePositions[startIdx]]\r\n  let currentIdx = startIdx\r\n  for (let i = 1; i < pathLength; i++) {\r\n    currentIdx = (currentIdx + Math.floor(Math.random() * 5) + 1) % particleCount\r\n    path.push(basePositions[currentIdx])\r\n  }\r\n  return {\r\n    path,\r\n    currentSegment: 0,\r\n    progress: 0,\r\n    speed: 0.01 + Math.random() * 0.02,\r\n    life: 1.0,\r\n    scale: 0.8 + Math.random() * 1.2\r\n  }\r\n}\r\n\r\nexport default function NeuralScene() {\r\n  return (\r\n    <Canvas camera={{ position: [0, 0, 250], fov: 75 }} style={{ width: '100vw', height: '100vh' }}>\r\n      <color attach=\"background\" args={['#0e0e1a']} />\r\n      <NeuralCore />\r\n    </Canvas>\r\n  )\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}