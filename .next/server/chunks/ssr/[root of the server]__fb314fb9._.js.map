{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 38, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/styles/Header.module.css [app-ssr] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"active\": \"Header-module__KppamW__active\",\n  \"header\": \"Header-module__KppamW__header\",\n  \"header-container\": \"Header-module__KppamW__header-container\",\n  \"nav-menu\": \"Header-module__KppamW__nav-menu\",\n  \"scrolled\": \"Header-module__KppamW__scrolled\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA"}},
    {"offset": {"line": 51, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/gieln/code/projects/website/gnijkamp/src/components/Header.tsx"],"sourcesContent":["// src/components/Header.tsx\r\n'use client'\r\n\r\nimport Link from 'next/link'\r\nimport { usePathname } from 'next/navigation'\r\nimport { useEffect, useState } from 'react'\r\nimport styles from '../styles/Header.module.css'\r\n\r\ninterface NavLink {\r\n  name: string\r\n  path: string\r\n}\r\n\r\nexport default function Header() {\r\n  const pathname = usePathname()\r\n  const [isScrolled, setIsScrolled] = useState(false)\r\n\r\n  const links: NavLink[] = [\r\n    { name: 'Home', path: '/' },\r\n    { name: 'About', path: '/about' },\r\n    { name: 'Blog', path: '/blog' },\r\n    { name: 'Projects', path: '/projects' },\r\n    { name: 'Newsletter', path: '/newsletter' },\r\n    { name: 'Contact', path: '/contact' }\r\n  ]\r\n\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      setIsScrolled(window.scrollY > 10)\r\n      document.documentElement.style.setProperty(\r\n        '--header-current-height', \r\n        window.scrollY > 10 ? 'var(--header-height-scrolled)' : 'var(--header-height)'\r\n      )\r\n    }\r\n    \r\n    // Initialize on mount\r\n    handleScroll()\r\n    \r\n    window.addEventListener('scroll', handleScroll, { passive: true })\r\n    return () => window.removeEventListener('scroll', handleScroll)\r\n  }, [])\r\n\r\n  return (\r\n    <header \r\n      className={`${styles.header} ${isScrolled ? styles.scrolled : ''}`}\r\n      style={{\r\n        height: 'var(--header-current-height, var(--header-height))'\r\n      }}\r\n    >\r\n      <div className={styles['header-container']}>\r\n        <nav className={styles['nav-menu']} aria-label=\"Main navigation\">\r\n          <ul role=\"list\">\r\n            {links.map((link) => (\r\n              <li key={link.path}>\r\n                <Link\r\n                  href={link.path}\r\n                  className={`${styles['nav-link']} ${\r\n                    pathname === link.path ? styles.active : ''\r\n                  }`}\r\n                  aria-current={pathname === link.path ? 'page' : undefined}\r\n                >\r\n                  {link.name}\r\n                </Link>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n    </header>\r\n  )\r\n}"],"names":[],"mappings":"AAAA,4BAA4B;;;;;AAG5B;AACA;AACA;AACA;AALA;;;;;;AAYe,SAAS;IACtB,MAAM,WAAW,CAAA,GAAA,kIAAA,CAAA,cAAW,AAAD;IAC3B,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE7C,MAAM,QAAmB;QACvB;YAAE,MAAM;YAAQ,MAAM;QAAI;QAC1B;YAAE,MAAM;YAAS,MAAM;QAAS;QAChC;YAAE,MAAM;YAAQ,MAAM;QAAQ;QAC9B;YAAE,MAAM;YAAY,MAAM;QAAY;QACtC;YAAE,MAAM;YAAc,MAAM;QAAc;QAC1C;YAAE,MAAM;YAAW,MAAM;QAAW;KACrC;IAED,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,eAAe;YACnB,cAAc,OAAO,OAAO,GAAG;YAC/B,SAAS,eAAe,CAAC,KAAK,CAAC,WAAW,CACxC,2BACA,OAAO,OAAO,GAAG,KAAK,kCAAkC;QAE5D;QAEA,sBAAsB;QACtB;QAEA,OAAO,gBAAgB,CAAC,UAAU,cAAc;YAAE,SAAS;QAAK;QAChE,OAAO,IAAM,OAAO,mBAAmB,CAAC,UAAU;IACpD,GAAG,EAAE;IAEL,qBACE,8OAAC;QACC,WAAW,GAAG,mIAAA,CAAA,UAAM,CAAC,MAAM,CAAC,CAAC,EAAE,aAAa,mIAAA,CAAA,UAAM,CAAC,QAAQ,GAAG,IAAI;QAClE,OAAO;YACL,QAAQ;QACV;kBAEA,cAAA,8OAAC;YAAI,WAAW,mIAAA,CAAA,UAAM,CAAC,mBAAmB;sBACxC,cAAA,8OAAC;gBAAI,WAAW,mIAAA,CAAA,UAAM,CAAC,WAAW;gBAAE,cAAW;0BAC7C,cAAA,8OAAC;oBAAG,MAAK;8BACN,MAAM,GAAG,CAAC,CAAC,qBACV,8OAAC;sCACC,cAAA,8OAAC,4JAAA,CAAA,UAAI;gCACH,MAAM,KAAK,IAAI;gCACf,WAAW,GAAG,mIAAA,CAAA,UAAM,CAAC,WAAW,CAAC,CAAC,EAChC,aAAa,KAAK,IAAI,GAAG,mIAAA,CAAA,UAAM,CAAC,MAAM,GAAG,IACzC;gCACF,gBAAc,aAAa,KAAK,IAAI,GAAG,SAAS;0CAE/C,KAAK,IAAI;;;;;;2BARL,KAAK,IAAI;;;;;;;;;;;;;;;;;;;;;;;;;AAiBhC","debugId":null}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/gieln/code/projects/website/gnijkamp/src/components/NeuralNetwork/Particles.tsx"],"sourcesContent":["'use client'\r\nimport { useRef, useMemo, useEffect } from 'react'\r\nimport * as THREE from 'three'\r\n\r\nexport function Particles() {\r\n  const particles = useRef<THREE.InstancedMesh>(null!)\r\n  const tempGeo = useMemo(() => new THREE.IcosahedronGeometry(80, 2), [])\r\n  const dummy = useMemo(() => new THREE.Object3D(), [])\r\n\r\n  useEffect(() => {\r\n    const vertices = tempGeo.attributes.position.array\r\n    for (let i = 0; i < vertices.length / 3; i++) {\r\n      dummy.position.set(vertices[i*3], vertices[i*3+1], vertices[i*3+2])\r\n      dummy.updateMatrix()\r\n      particles.current.setMatrixAt(i, dummy.matrix)\r\n    }\r\n    particles.current.instanceMatrix.needsUpdate = true\r\n  }, [tempGeo, dummy])\r\n\r\n  return (\r\n    <instancedMesh\r\n      ref={particles}\r\n      args={[undefined, undefined, tempGeo.attributes.position.count / 3]}\r\n    >\r\n      <sphereGeometry args={[0.6, 8, 8]} />\r\n      <meshBasicMaterial \r\n        color={0xffff00} \r\n        transparent \r\n        opacity={0.9} \r\n        blending={THREE.AdditiveBlending} \r\n      />\r\n    </instancedMesh>\r\n  )\r\n}"],"names":[],"mappings":";;;;AACA;AACA;AAFA;;;;AAIO,SAAS;IACd,MAAM,YAAY,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAuB;IAC9C,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,UAAO,AAAD,EAAE,IAAM,IAAI,+IAAA,CAAA,sBAAyB,CAAC,IAAI,IAAI,EAAE;IACtE,MAAM,QAAQ,CAAA,GAAA,qMAAA,CAAA,UAAO,AAAD,EAAE,IAAM,IAAI,+IAAA,CAAA,WAAc,IAAI,EAAE;IAEpD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,WAAW,QAAQ,UAAU,CAAC,QAAQ,CAAC,KAAK;QAClD,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,MAAM,GAAG,GAAG,IAAK;YAC5C,MAAM,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAE,EAAE,EAAE,QAAQ,CAAC,IAAE,IAAE,EAAE,EAAE,QAAQ,CAAC,IAAE,IAAE,EAAE;YAClE,MAAM,YAAY;YAClB,UAAU,OAAO,CAAC,WAAW,CAAC,GAAG,MAAM,MAAM;QAC/C;QACA,UAAU,OAAO,CAAC,cAAc,CAAC,WAAW,GAAG;IACjD,GAAG;QAAC;QAAS;KAAM;IAEnB,qBACE,8OAAC;QACC,KAAK;QACL,MAAM;YAAC;YAAW;YAAW,QAAQ,UAAU,CAAC,QAAQ,CAAC,KAAK,GAAG;SAAE;;0BAEnE,8OAAC;gBAAe,MAAM;oBAAC;oBAAK;oBAAG;iBAAE;;;;;;0BACjC,8OAAC;gBACC,OAAO;gBACP,WAAW;gBACX,SAAS;gBACT,UAAU,+IAAA,CAAA,mBAAsB;;;;;;;;;;;;AAIxC","debugId":null}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/gieln/code/projects/website/gnijkamp/src/components/NeuralNetwork/Signals.tsx"],"sourcesContent":["'use client'\r\nimport { useRef, useMemo } from 'react'\r\nimport * as THREE from 'three'\r\nimport signalVert from './shaders/signal.vert'\r\nimport signalFrag from './shaders/signal.frag'\r\n\r\nexport function Signals() {\r\n  const signals = useRef<THREE.InstancedMesh>(null!)\r\n  const dummy = useMemo(() => new THREE.Object3D(), [])\r\n  \r\n  const material = useMemo(() => new THREE.ShaderMaterial({\r\n    uniforms: {\r\n      time: { value: 0 },\r\n      intensity: { value: 1.0 }\r\n    },\r\n    vertexShader: signalVert,\r\n    fragmentShader: signalFrag,\r\n    transparent: true,\r\n    blending: THREE.AdditiveBlending\r\n  }), [])\r\n\r\n  return (\r\n    <instancedMesh\r\n      ref={signals}\r\n      args={[undefined, undefined, 150]}\r\n      material={material}\r\n    >\r\n      <sphereGeometry args={[1.2, 32, 32]} />\r\n    </instancedMesh>\r\n  )\r\n}"],"names":[],"mappings":";;;;AACA;AACA;AAFA;;;;;;AAMO,SAAS;IACd,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAuB;IAC5C,MAAM,QAAQ,CAAA,GAAA,qMAAA,CAAA,UAAO,AAAD,EAAE,IAAM,IAAI,+IAAA,CAAA,WAAc,IAAI,EAAE;IAEpD,MAAM,WAAW,CAAA,GAAA,qMAAA,CAAA,UAAO,AAAD,EAAE,IAAM,IAAI,+IAAA,CAAA,iBAAoB,CAAC;YACtD,UAAU;gBACR,MAAM;oBAAE,OAAO;gBAAE;gBACjB,WAAW;oBAAE,OAAO;gBAAI;YAC1B;YACA,cAAc;YACd,gBAAgB;YAChB,aAAa;YACb,UAAU,+IAAA,CAAA,mBAAsB;QAClC,IAAI,EAAE;IAEN,qBACE,8OAAC;QACC,KAAK;QACL,MAAM;YAAC;YAAW;YAAW;SAAI;QACjC,UAAU;kBAEV,cAAA,8OAAC;YAAe,MAAM;gBAAC;gBAAK;gBAAI;aAAG;;;;;;;;;;;AAGzC","debugId":null}},
    {"offset": {"line": 290, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/gieln/code/projects/website/gnijkamp/src/components/NeuralNetwork/Beams.tsx"],"sourcesContent":["'use client'\r\nimport { useMemo } from 'react'\r\nimport * as THREE from 'three'\r\nimport beamVert from './shaders/beam.vert'\r\nimport beamFrag from './shaders/beam.frag'\r\n\r\nexport function Beams() {\r\n    const MAX_BEAMS = 500\r\n    \r\n    const [geometry, material] = useMemo(() => {\r\n        // Geometry setup\r\n        const geometry = new THREE.BufferGeometry()\r\n        const positions = new Float32Array(MAX_BEAMS * 3 * 2)\r\n        const alphas = new Float32Array(MAX_BEAMS * 2)\r\n        \r\n        geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3))\r\n        geometry.setAttribute('alpha', new THREE.BufferAttribute(alphas, 1))\r\n        \r\n        // Material setup\r\n        const material = new THREE.ShaderMaterial({\r\n            uniforms: {\r\n                time: { value: 0 },\r\n                color: { value: new THREE.Color(0xffff00) }\r\n            },\r\n            vertexShader: beamVert,\r\n            fragmentShader: beamFrag,\r\n            transparent: true,\r\n            blending: THREE.AdditiveBlending,\r\n            depthWrite: false\r\n        })\r\n        \r\n        return [geometry, material]\r\n    }, [])\r\n\r\n    return <lineSegments geometry={geometry} material={material} />\r\n}"],"names":[],"mappings":";;;;AACA;AACA;AAFA;;;;;;AAMO,SAAS;IACZ,MAAM,YAAY;IAElB,MAAM,CAAC,UAAU,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,UAAO,AAAD,EAAE;QACjC,iBAAiB;QACjB,MAAM,WAAW,IAAI,+IAAA,CAAA,iBAAoB;QACzC,MAAM,YAAY,IAAI,aAAa,YAAY,IAAI;QACnD,MAAM,SAAS,IAAI,aAAa,YAAY;QAE5C,SAAS,YAAY,CAAC,YAAY,IAAI,+IAAA,CAAA,kBAAqB,CAAC,WAAW;QACvE,SAAS,YAAY,CAAC,SAAS,IAAI,+IAAA,CAAA,kBAAqB,CAAC,QAAQ;QAEjE,iBAAiB;QACjB,MAAM,WAAW,IAAI,+IAAA,CAAA,iBAAoB,CAAC;YACtC,UAAU;gBACN,MAAM;oBAAE,OAAO;gBAAE;gBACjB,OAAO;oBAAE,OAAO,IAAI,+IAAA,CAAA,QAAW,CAAC;gBAAU;YAC9C;YACA,cAAc;YACd,gBAAgB;YAChB,aAAa;YACb,UAAU,+IAAA,CAAA,mBAAsB;YAChC,YAAY;QAChB;QAEA,OAAO;YAAC;YAAU;SAAS;IAC/B,GAAG,EAAE;IAEL,qBAAO,8OAAC;QAAa,UAAU;QAAU,UAAU;;;;;;AACvD","debugId":null}},
    {"offset": {"line": 346, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 352, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/gieln/code/projects/website/gnijkamp/src/components/NeuralNetwork/AnimationController.tsx"],"sourcesContent":["'use client'\r\nimport { useRef, useEffect } from 'react'\r\nimport { useFrame } from '@react-three/fiber'\r\nimport * as THREE from 'three'\r\nimport type { ParticlesRef, SignalsRef, BeamsRef, ConnectionsRef } from './types'\r\n\r\nexport function useAnimationController({\r\n  particles,\r\n  signals,\r\n  beams,\r\n  connections\r\n}: {\r\n  particles: ParticlesRef\r\n  signals: SignalsRef\r\n  beams: BeamsRef\r\n  connections: ConnectionsRef\r\n}) {\r\n  const signalQueue = useRef<Signal[]>([])\r\n  const activeBeams = useRef<Beam[]>([])\r\n  const lastSignalTime = useRef(0)\r\n\r\n  useFrame(({ clock }) => {\r\n    const time = clock.getElapsedTime()\r\n    \r\n    // Update all systems\r\n    updateSignals(time)\r\n    updateBeams(time)\r\n    updateConnections(time)\r\n    updateCoreRotation(time)\r\n  })\r\n\r\n  const updateSignals = (time: number) => {\r\n    // Your signal propagation logic\r\n    signals.current.material.uniforms.time.value = time\r\n    signals.current.material.uniforms.intensity.value = 1.0 + Math.sin(time * 10) * 0.9\r\n  }\r\n\r\n  const updateBeams = (time: number) => {\r\n    // Your beam update logic\r\n    beams.current.material.uniforms.time.value = time\r\n  }\r\n\r\n  const updateConnections = (time: number) => {\r\n    // Connection visibility logic\r\n    connections.current.material.uniforms.time.value = time\r\n  }\r\n\r\n  const updateCoreRotation = (time: number) => {\r\n    // Neural core rotation\r\n    particles.current.rotation.x += 0.0005 * Math.sin(time * 0.1)\r\n    particles.current.rotation.y += 0.0005 * Math.cos(time * 0.1)\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":";;;AACA;AACA;AAFA;;;AAMO,SAAS,uBAAuB,EACrC,SAAS,EACT,OAAO,EACP,KAAK,EACL,WAAW,EAMZ;IACC,MAAM,cAAc,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAY,EAAE;IACvC,MAAM,cAAc,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAU,EAAE;IACrC,MAAM,iBAAiB,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAE;IAE9B,CAAA,GAAA,+MAAA,CAAA,WAAQ,AAAD,EAAE,CAAC,EAAE,KAAK,EAAE;QACjB,MAAM,OAAO,MAAM,cAAc;QAEjC,qBAAqB;QACrB,cAAc;QACd,YAAY;QACZ,kBAAkB;QAClB,mBAAmB;IACrB;IAEA,MAAM,gBAAgB,CAAC;QACrB,gCAAgC;QAChC,QAAQ,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,GAAG;QAC/C,QAAQ,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,GAAG,MAAM,KAAK,GAAG,CAAC,OAAO,MAAM;IAClF;IAEA,MAAM,cAAc,CAAC;QACnB,yBAAyB;QACzB,MAAM,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,GAAG;IAC/C;IAEA,MAAM,oBAAoB,CAAC;QACzB,8BAA8B;QAC9B,YAAY,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,GAAG;IACrD;IAEA,MAAM,qBAAqB,CAAC;QAC1B,uBAAuB;QACvB,UAAU,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,SAAS,KAAK,GAAG,CAAC,OAAO;QACzD,UAAU,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,SAAS,KAAK,GAAG,CAAC,OAAO;IAC3D;AACF","debugId":null}},
    {"offset": {"line": 397, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/gieln/code/projects/website/gnijkamp/src/components/NeuralNetwork/index.tsx"],"sourcesContent":["'use client'\r\nimport { useRef } from 'react'\r\nimport { Group } from 'three'\r\nimport { Particles } from './Particles'\r\nimport { Signals } from './Signals'\r\nimport { Beams } from './Beams'\r\nimport { Connections } from './Connections'\r\nimport { useAnimationController } from './AnimationController'\r\nimport type { ParticlesRef, SignalsRef, BeamsRef, ConnectionsRef } from './types'\r\n\r\nexport default function NeuralNetwork() {\r\n  const particles = useRef<ParticlesRef>(null)\r\n  const signals = useRef<SignalsRef>(null)\r\n  const beams = useRef<BeamsRef>(null)\r\n  const connections = useRef<ConnectionsRef>(null)\r\n\r\n  useAnimationController({ particles, signals, beams, connections })\r\n\r\n  return (\r\n    <Group>\r\n      <Particles ref={particles} />\r\n      <Signals ref={signals} />\r\n      <Beams ref={beams} />\r\n      <Connections ref={connections} />\r\n    </Group>\r\n  )\r\n}"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;;;;;;;;;AAUe,SAAS;IACtB,MAAM,YAAY,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAgB;IACvC,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAc;IACnC,MAAM,QAAQ,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAY;IAC/B,MAAM,cAAc,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAkB;IAE3C,CAAA,GAAA,0JAAA,CAAA,yBAAsB,AAAD,EAAE;QAAE;QAAW;QAAS;QAAO;IAAY;IAEhE,qBACE,8OAAC,+IAAA,CAAA,QAAK;;0BACJ,8OAAC,gJAAA,CAAA,YAAS;gBAAC,KAAK;;;;;;0BAChB,8OAAC,8IAAA,CAAA,UAAO;gBAAC,KAAK;;;;;;0BACd,8OAAC,4IAAA,CAAA,QAAK;gBAAC,KAAK;;;;;;0BACZ,8OAAC,kJAAA,CAAA,cAAW;gBAAC,KAAK;;;;;;;;;;;;AAGxB","debugId":null}}]
}